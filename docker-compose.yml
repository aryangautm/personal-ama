name: Personal-AMA

networks:
  app-network:
    driver: bridge

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    ports:
      - "3000:80" # Map host port 3000 to the container's Nginx port 80
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

  api:
    container_name: backend
    extends:
      file: docker-compose.base.yml
      service: backend-service
    ports:
      - '8000:8000'
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --proxy-headers
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  postgresql:
    container_name: db
    image: pgvector/pgvector:pg17
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  proxy-manager:
    container_name: nginx
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # Public-facing ports for web traffic
      - '80:80'
      - '443:443'
      # Admin UI port
      - '81:81'
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - app-network
    depends_on:
      - frontend
      - api

volumes:
  pgdata:
    driver: local
  npm_data: {}
  npm_letsencrypt: {}